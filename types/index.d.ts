// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../@vue/runtime-core
//   ../vue

declare module 'vuesax3' {
    import './style/sass/vuesax.scss';
    import { App } from '@vue/runtime-core';
    import "material-design-icons/iconfont/material-icons.css";
    const install: (Vue: App, options?: any) => void;
    export default install;
    export { vsButton, vsButtonGroup } from 'vuesax3/components/vsButton';
    export { vsSelect, vsSelectOption, vsSelectOptionGroup } from 'vuesax3/components/vsSelect';
    export { default as vsSwitch } from 'vuesax3/components/vsSwitch';
    export { default as vsCheckbox } from 'vuesax3/components/vsCheckBox';
    export { default as vsRadio } from 'vuesax3/components/vsRadio';
    export { default as vsInput } from 'vuesax3/components/vsInput';
    export { vsTab, vsTabs } from 'vuesax3/components/vsTabs';
    export { default as vsAlert } from 'vuesax3/components/vsAlert';
    export { vsChip, vsChips } from 'vuesax3/components/vsChip';
    export { vsCard, vsCardGroup } from 'vuesax3/components/vsCard';
    export { default as vsAvatar } from 'vuesax3/components/vsAvatar';
    export { default as vsPagination } from 'vuesax3/components/vsPagination';
    export { default as vsBreadcrumb } from 'vuesax3/components/vsBreadcrumb';
    export { loading, LoadingAttributes } from 'vuesax3/components/vsLoading';
    export { default as vsDivider } from 'vuesax3/components/vsDivider';
    export { default as vsIcon } from 'vuesax3/components/vsIcon';
    export { vsNavbar, vsNavbarGroup, vsNavbarItem } from 'vuesax3/components/vsNavbar';
    export { notification, NotificationAttributes } from 'vuesax3/components/vsNotifications';
    export { vsSidebar, vsSidebarGroup, vsSidebarItem } from 'vuesax3/components/vsSideBar';
    export { vsPopper, vsPopupMenu, vsPopupItem } from 'vuesax3/components/vsPopper';
    export { default as vsDialog } from 'vuesax3/components/vsDialog';
    export { vsCollapse, vsCollapseItem } from 'vuesax3/components/vsCollapse';
    export { default as vsRow } from 'vuesax3/layout/vsRow';
    export { default as vsCol } from 'vuesax3/layout/vsCol';
}

declare module 'vuesax3/components/vsButton' {
    import vsComponent from 'vuesax3/components/vsButton/vsButton.vue';
    import vsComponent1 from 'vuesax3/components/vsButton/vsButtonGroup.vue';
    export { vsComponent as vsButton, vsComponent1 as vsButtonGroup };
}

declare module 'vuesax3/components/vsSelect' {
    import vsComponent from 'vuesax3/components/vsSelect/vsSelect.vue';
    import vsComponent2 from 'vuesax3/components/vsSelect/vsSelectOptionGroup.vue';
    import vsComponent3 from 'vuesax3/components/vsSelect/vsSelectOption.vue';
    export { vsComponent as vsSelect, vsComponent2 as vsSelectOption, vsComponent3 as vsSelectOptionGroup };
}

declare module 'vuesax3/components/vsSwitch' {
    import vsComponent from 'vuesax3/components/vsSwitch/vsSwitch.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsCheckBox' {
    import vsComponent from 'vuesax3/components/vsCheckBox/vsCheckBox.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsRadio' {
    import vsComponent from 'vuesax3/components/vsRadio/vsRadio.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsInput' {
    import vsComponent from 'vuesax3/components/vsInput/vsInput.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsTabs' {
    import vsComponent from 'vuesax3/components/vsTabs/vsTabs.vue';
    import vsComponent2 from 'vuesax3/components/vsTabs/vsTab.vue';
    export { vsComponent as vsTabs, vsComponent2 as vsTab };
}

declare module 'vuesax3/components/vsAlert' {
    import vsComponent from 'vuesax3/components/vsAlert/vsAlert.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsChip' {
    import vsComponent from 'vuesax3/components/vsChip/vsChip.vue';
    import vsComponent2 from 'vuesax3/components/vsChip/vsChips.vue';
    export { vsComponent as vsChip, vsComponent2 as vsChips };
}

declare module 'vuesax3/components/vsCard' {
    import vsComponent from 'vuesax3/components/vsCard/vsCard.vue';
    import vsComponent2 from 'vuesax3/components/vsCard/vsCardGroup.vue';
    export { vsComponent as vsCard, vsComponent2 as vsCardGroup };
}

declare module 'vuesax3/components/vsAvatar' {
    import vsComponent from 'vuesax3/components/vsAvatar/vsAvatar.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsPagination' {
    import vsComponent from 'vuesax3/components/vsPagination/vsPagination.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsBreadcrumb' {
    import vsComponent from 'vuesax3/components/vsBreadcrumb/vsBreadcrumb.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsLoading' {
    import { App, Ref } from 'vue';
    interface LoadingAttributes {
        type?: string;
        text?: string;
        hidden?: boolean;
        color?: string;
        background?: string;
        opacity?: string;
        percent?: string;
        progress?: number;
        target?: any;
        scale?: string;
    }
    class loading {
        instance: App | null;
        params: Ref<LoadingAttributes>;
        isVisible: boolean;
        changeText(val: string): void;
        changeProgress(val: number): void;
        changePercent(val: string): void;
        close(): void;
        constructor(paramsAttr: LoadingAttributes);
    }
    export { loading, LoadingAttributes };
}

declare module 'vuesax3/components/vsDivider' {
    import vsComponent from 'vuesax3/components/vsDivider/vsDivider.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsIcon' {
    import vsComponent from 'vuesax3/components/vsIcon/vsIcon.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsNavbar' {
    import vsComponent from 'vuesax3/components/vsNavbar/vsNavbar.vue';
    import vsComponent2 from 'vuesax3/components/vsNavbar/vsNavbarGroup.vue';
    import vsComponent3 from 'vuesax3/components/vsNavbar/vsNavbarItem.vue';
    export { vsComponent as vsNavbar, vsComponent2 as vsNavbarGroup, vsComponent3 as vsNavbarItem };
}

declare module 'vuesax3/components/vsNotifications' {
    import { App } from 'vue';
    interface NotificationAttributes {
        position?: "bottom-left" | "bottom-right" | "bottom-center" | "top-left" | "top-right" | "top-center";
        isVisible?: Boolean;
        content?: Object;
        title: String;
        text?: String;
        color?: String;
        border?: String;
        icon?: String;
        onClickClose?: Function;
        onClick?: Function;
        buttonClose?: Boolean;
        flat?: Boolean;
        onDestroy?: Function;
        sticky?: Boolean;
        square?: Boolean;
        width?: String;
        loading?: Boolean;
        progressAuto?: Boolean;
        progress?: Number;
        duration?: Number;
        notPadding?: Object;
        clickClose?: Boolean;
        classNotification?: String;
    }
    class notification {
        static notifId: number;
        static instanceList: any;
        clientClose: Function | null;
        instance: App | null;
        currentId: number;
        static closeAll(params: any): void;
        close(): void;
        constructor(paramsAttr: NotificationAttributes);
    }
    export { notification, NotificationAttributes };
}

declare module 'vuesax3/components/vsSideBar' {
    import vsComponent from 'vuesax3/components/vsSideBar/vsSidebar.vue';
    import vsComponent2 from 'vuesax3/components/vsSideBar/vsSidebarItem.vue';
    import vsComponent3 from 'vuesax3/components/vsSideBar/vsSidebarGroup.vue';
    export { vsComponent as vsSidebar, vsComponent2 as vsSidebarItem, vsComponent3 as vsSidebarGroup };
}

declare module 'vuesax3/components/vsPopper' {
    import vsComponent from 'vuesax3/components/vsPopper/vsPopper.vue';
    import vsComponent1 from 'vuesax3/components/vsPopper/vsPopupMenu.vue';
    import vsComponent2 from 'vuesax3/components/vsPopper/vsPopupItem.vue';
    export { vsComponent as vsPopper, vsComponent1 as vsPopupMenu, vsComponent2 as vsPopupItem };
}

declare module 'vuesax3/components/vsDialog' {
    import vsComponent from 'vuesax3/components/vsDialog/vsDialog.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsCollapse' {
    import vsComponent from 'vuesax3/components/vsCollapse/vsCollapse.vue';
    import vsComponent2 from 'vuesax3/components/vsCollapse/vsCollapseItem.vue';
    export { vsComponent as vsCollapse, vsComponent2 as vsCollapseItem };
}

declare module 'vuesax3/layout/vsRow' {
    import vsComponent from 'vuesax3/layout/vsRow/vsRow.vue';
    export default vsComponent;
}

declare module 'vuesax3/layout/vsCol' {
    import vsComponent from 'vuesax3/layout/vsCol/vsCol.vue';
    export default vsComponent;
}

declare module 'vuesax3/components/vsButton/vsButton.vue' {
    const _default: import("vue").DefineComponent<{
        ripple: {
            type: StringConstructor;
            default: string;
        };
        activeDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        flat: {
            type: BooleanConstructor;
            default: boolean;
        };
        border: {
            type: BooleanConstructor;
            default: boolean;
        };
        gradient: {
            type: BooleanConstructor;
            default: boolean;
        };
        relief: {
            type: BooleanConstructor;
            default: boolean;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        floating: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: BooleanConstructor;
            default: boolean;
        };
        circle: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        size: {
            type: StringConstructor;
            default: null;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        upload: {
            type: BooleanConstructor;
            default: boolean;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        animationType: {
            type: StringConstructor;
            default: string;
        };
        animateInactive: {
            type: BooleanConstructor;
            default: boolean;
        };
        to: {
            type: StringConstructor;
            default: null;
        };
        href: {
            type: StringConstructor;
            default: null;
        };
        blank: {
            type: BooleanConstructor;
            default: boolean;
        };
        inline: {
            type: BooleanConstructor;
            default: boolean;
        };
        width: {
            type: StringConstructor;
            default: null;
        };
        height: {
            type: StringConstructor;
            default: null;
        };
    }, {
        clickButton: (event: any) => void;
        listeners: import("vue").ComputedRef<{
            click: (event: any) => void;
            mousedown: (event: any) => void;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("routeErr" | "mouseover" | "mouseout" | "blur" | "click")[], "routeErr" | "mouseover" | "mouseout" | "blur" | "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        icon: boolean;
        size: string;
        flat: boolean;
        ripple: string;
        activeDisabled: boolean;
        border: boolean;
        gradient: boolean;
        relief: boolean;
        transparent: boolean;
        shadow: boolean;
        floating: boolean;
        circle: boolean;
        square: boolean;
        loading: boolean;
        upload: boolean;
        block: boolean;
        animationType: string;
        animateInactive: boolean;
        to: string;
        href: string;
        blank: boolean;
        inline: boolean;
        width: string;
        height: string;
    } & {}>, {
        icon: boolean;
        size: string;
        flat: boolean;
        ripple: string;
        activeDisabled: boolean;
        border: boolean;
        gradient: boolean;
        relief: boolean;
        transparent: boolean;
        shadow: boolean;
        floating: boolean;
        circle: boolean;
        square: boolean;
        loading: boolean;
        upload: boolean;
        block: boolean;
        animationType: string;
        animateInactive: boolean;
        to: string;
        href: string;
        blank: boolean;
        inline: boolean;
        width: string;
        height: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsButton/vsButtonGroup.vue' {
    import Vue from 'vue';
    const _default: Vue.DefineComponent<{
        fixedHeight: {
            type: StringConstructor;
            default: string;
        };
    }, unknown, unknown, {}, {}, Vue.ComponentOptionsMixin, Vue.ComponentOptionsMixin, Record<string, any>, string, Vue.VNodeProps & Vue.AllowedComponentProps & Vue.ComponentCustomProps, Readonly<{
        fixedHeight: string;
    } & {}>, {
        fixedHeight: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSelect/vsSelect.vue' {
    const _default: import("vue").DefineComponent<{
        modelValue: {};
        multiple: {
            type: BooleanConstructor;
            default: boolean;
        };
        dropdown: {
            type: BooleanConstructor;
            default: boolean;
        };
        inline: {
            type: BooleanConstructor;
            default: boolean;
        };
        filter: {
            type: BooleanConstructor;
            default: boolean;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        labelPlaceholder: {
            type: StringConstructor;
            default: string;
        };
        label: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        collapseChips: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        state: {
            type: StringConstructor;
            default: null;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        selectItems: {
            type: ArrayConstructor;
            default: never[];
        };
    }, {
        chipsHovered: import("vue").Ref<boolean>;
        renderSelect: import("vue").Ref<boolean>;
        activeOptions: import("vue").Ref<boolean>;
        valueLabel: any;
        hoverOption: import("vue").Ref<number>;
        uids: import("vue").Ref<any[]>;
        childOptions: import("vue").Ref<any[]>;
        targetSelect: import("vue").Ref<boolean>;
        targetSelectInput: import("vue").Ref<boolean>;
        targetClose: import("vue").Ref<boolean>;
        activeFilter: import("vue").Ref<boolean>;
        textFilter: import("vue").Ref<String | undefined>;
        childVisibles: import("vue").Ref<number>;
        uid: string;
        getChips: import("vue").ComputedRef<any[]>;
        selectListener: import("vue").ComputedRef<{
            mouseleave: (evt: any) => void;
            mouseenter: () => void;
        }>;
        inputListener: import("vue").ComputedRef<{
            keydown: (evt: any) => void;
            focus: (evt: Event) => void;
            input: (evt: any) => void;
        }>;
        getValueLabel: import("vue").ComputedRef<any[]>;
        chipsListener: import("vue").ComputedRef<{
            keydown: (evt: any) => void;
            mouseover: (event: any) => void;
            mouseout: (event: any) => void;
            focus: (evt: Event) => void;
            blur: typeof blur;
        }>;
        chipsFilterListener: import("vue").ComputedRef<{
            focus: (evt: Event) => void;
            blur: typeof blur;
            input: (evt: any) => void;
        }>;
        notData: import("vue").ComputedRef<boolean>;
        iconClicked: () => void;
        chips: import("vue").Ref<HTMLButtonElement | undefined>;
        chipsInput: import("vue").Ref<HTMLInputElement | undefined>;
        input: import("vue").Ref<HTMLInputElement | undefined>;
        options: import("vue").Ref<HTMLDivElement | undefined>;
        select: import("vue").Ref<HTMLDivElement | undefined>;
        content: import("vue").Ref<HTMLDivElement | undefined>;
        beforeEnter: (el: any) => void;
        enter: (el: any, done: any) => void;
        leave: (el: any, done: any) => void;
        setHover: () => void;
        onClickOption: (value: any, label: any) => void;
        isValue: import("vue").ComputedRef<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        filter: boolean;
        loading: boolean;
        block: boolean;
        inline: boolean;
        multiple: boolean;
        dropdown: boolean;
        placeholder: string;
        labelPlaceholder: string;
        label: string;
        disabled: boolean;
        collapseChips: boolean;
        state: string;
        selectItems: unknown[];
    } & {
        modelValue?: unknown;
    }>, {
        filter: boolean;
        loading: boolean;
        block: boolean;
        inline: boolean;
        multiple: boolean;
        dropdown: boolean;
        placeholder: string;
        labelPlaceholder: string;
        label: string;
        disabled: boolean;
        collapseChips: boolean;
        state: string;
        selectItems: unknown[];
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSelect/vsSelectOptionGroup.vue' {
    import { Ref } from "vue";
    const _default: {
        name: string;
        inheritAttrs: boolean;
        extends: import("vue").DefineComponent<{
            color: {
                type: StringConstructor;
                default: null;
            };
            danger: {
                type: BooleanConstructor;
                default: boolean;
            };
            success: {
                type: BooleanConstructor;
                default: boolean;
            };
            warn: {
                type: BooleanConstructor;
                default: boolean;
            };
            dark: {
                type: BooleanConstructor;
                default: boolean;
            };
            primary: {
                type: BooleanConstructor;
                default: boolean;
            };
            active: {
                type: BooleanConstructor;
                default: boolean;
            };
            colorSecondary: {
                type: StringConstructor;
                default: string;
            };
            textColor: {
                type: StringConstructor;
                default: null;
            };
        }, unknown, {
            componentColor: Ref<string>;
            getColor: (color: any) => any;
            getColorSecondary: FunctionConstructor;
            approuter: import("vue-router").Router | undefined;
        }, {}, {
            isColorDark(): boolean;
            isColor(): boolean;
        }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            color: string;
            danger: boolean;
            success: boolean;
            warn: boolean;
            dark: boolean;
            primary: boolean;
            active: boolean;
            colorSecondary: string;
            textColor: string;
        } & {}>, {
            color: string;
            danger: boolean;
            success: boolean;
            warn: boolean;
            dark: boolean;
            primary: boolean;
            active: boolean;
            colorSecondary: string;
            textColor: string;
        }>;
        props: {
            disabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            value: {
                default: null;
            };
            text: {
                default: null;
            };
        };
        setup(props: any, context: any): {
            optionGroup: Ref<boolean>;
            textFilter: Ref<String | undefined>;
            hiddenOptionGroup: Ref<boolean>;
            clickOption: (value: any, label: any) => void;
            labels: import("vue").ComputedRef<string>;
        };
    };
    export default _default;
}

declare module 'vuesax3/components/vsSelect/vsSelectOption.vue' {
    import { Ref } from "vue";
    export class SelectOptionConstants {
        static id: number;
    }
    const _default: import("vue").DefineComponent<{
        label: {
            type: StringConstructor;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        value: {};
    }, {
        isActive: import("vue").ComputedRef<boolean>;
        isHover: import("vue").ComputedRef<boolean>;
        isMultiple: import("vue").ComputedRef<Boolean | undefined>;
        hiddenOption: Ref<boolean>;
        activeOption: Ref<boolean>;
        listeners: import("vue").ComputedRef<{
            click: () => void;
            blur: () => void;
        }>;
        uid: number;
        dropdown: Ref<Boolean> | undefined;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        label: string;
        disabled: boolean;
    } & {
        value?: unknown;
    }>, {
        label: string;
        disabled: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSwitch/vsSwitch.vue' {
    const _default: import("vue").DefineComponent<{
        modelValue: {
            default: string;
        };
        val: {
            default: string;
        };
        notValue: {
            default: string;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        icon: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        isChecked: import("vue").ComputedRef<boolean>;
        inputListener: import("vue").ComputedRef<{
            input: (evt: any) => void;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("change" | "update:modelValue")[], "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        icon: boolean;
        square: boolean;
        loading: boolean;
        modelValue: string;
        val: string;
        notValue: string;
        indeterminate: boolean;
    } & {}>, {
        icon: boolean;
        square: boolean;
        loading: boolean;
        modelValue: string;
        val: string;
        notValue: string;
        indeterminate: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsCheckBox/vsCheckBox.vue' {
    const _default: import("vue").DefineComponent<{
        value: {
            type: (StringConstructor | BooleanConstructor | ArrayConstructor)[];
            default: string;
        };
        val: {
            default: string;
        };
        notValue: {
            default: string;
        };
        indeterminate: {
            type: BooleanConstructor;
            default: boolean;
        };
        lineThrough: {
            type: BooleanConstructor;
            default: boolean;
        };
        checked: {
            type: BooleanConstructor;
            default: boolean;
        };
        checkedForce: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        labelBefore: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        listeners: import("vue").ComputedRef<{
            input: (evt: any) => void;
            blur: (evt: EventTarget) => void;
        }>;
        isChecked: import("vue").ComputedRef<boolean>;
        uid: number;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("blur" | "change" | "update:value" | "mousedown")[], "blur" | "change" | "update:value" | "mousedown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value: string | boolean | unknown[];
        loading: boolean;
        val: string;
        notValue: string;
        indeterminate: boolean;
        lineThrough: boolean;
        checked: boolean;
        checkedForce: boolean;
        labelBefore: boolean;
    } & {}>, {
        value: string | boolean | unknown[];
        loading: boolean;
        val: string;
        notValue: string;
        indeterminate: boolean;
        lineThrough: boolean;
        checked: boolean;
        checkedForce: boolean;
        labelBefore: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsRadio/vsRadio.vue' {
    const _default: import("vue").DefineComponent<{
        modelValue: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor)[];
        };
        val: {
            type: (StringConstructor | ObjectConstructor | NumberConstructor)[];
        };
        name: {
            type: StringConstructor;
            default: null;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        labelBefore: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        isChecked: import("vue").ComputedRef<boolean>;
        uid: number;
        onInput: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, "update:modelValue"[], "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        loading: boolean;
        disabled: boolean;
        labelBefore: boolean;
        name: string;
    } & {
        modelValue?: unknown;
        val?: unknown;
    }>, {
        loading: boolean;
        disabled: boolean;
        labelBefore: boolean;
        name: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsInput/vsInput.vue' {
    const _default: import("@vue/runtime-core").DefineComponent<{
        modelValue: {
            default: string;
        };
        labelPlaceholder: {
            default: string;
        };
        label: {
            default: string;
        };
        block: {
            type: BooleanConstructor;
            default: boolean;
        };
        iconAfter: {
            type: BooleanConstructor;
            default: boolean;
        };
        visiblePassword: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: null;
        };
        state: {
            type: StringConstructor;
            default: null;
        };
        progress: {
            type: NumberConstructor;
            default: number;
        };
        border: {
            type: BooleanConstructor;
            default: boolean;
        };
        shadow: {
            type: BooleanConstructor;
            default: boolean;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
        textWhite: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        id: {
            type: StringConstructor;
            default: null;
        };
        placeholder: {
            type: StringConstructor;
            default: null;
        };
        inline: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        enter: (el: any, done: any) => void;
        beforeEnter: (el: any) => void;
        leave: (el: any, done: any) => void;
        onInput: (evt: any) => void;
        iconClick: (evt: any) => void;
        hasColor: import("@vue/reactivity").ComputedRef<string | boolean>;
        getId: import("@vue/reactivity").ComputedRef<string>;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("@vue/reactivity").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("update:modelValue" | "click-icon")[], "update:modelValue" | "click-icon", import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        color: string;
        id: string;
        label: string;
        progress: number;
        border: boolean;
        transparent: boolean;
        shadow: boolean;
        square: boolean;
        loading: boolean;
        block: boolean;
        inline: boolean;
        modelValue: string;
        placeholder: string;
        labelPlaceholder: string;
        state: string;
        iconAfter: boolean;
        visiblePassword: boolean;
        textWhite: boolean;
    } & {}>, {
        color: string;
        id: string;
        label: string;
        progress: number;
        border: boolean;
        transparent: boolean;
        shadow: boolean;
        square: boolean;
        loading: boolean;
        block: boolean;
        inline: boolean;
        modelValue: string;
        placeholder: string;
        labelPlaceholder: string;
        state: string;
        iconAfter: boolean;
        visiblePassword: boolean;
        textWhite: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsTabs/vsTabs.vue' {
    import { VNode } from "vue";
    export interface ChildData {
        label: string;
        icon: string;
        iconPack: string;
        tag: string;
        id: number;
        attrs: Object;
        disabled: boolean;
        vnode: VNode | undefined;
        setActive: Function;
        setInvert: Function;
        setVertical: Function;
    }
    export class TabId {
        tabId: number;
        resetId(): void;
    }
    const _default: import("vue").DefineComponent<{
        modelValue: {
            default: number;
            type: (StringConstructor | NumberConstructor)[];
        };
        color: {
            default: string;
            type: StringConstructor;
        };
        tagColor: {
            default: string;
            type: StringConstructor;
        };
        alignment: {
            default: string;
            type: StringConstructor;
        };
        position: {
            default: string;
            type: StringConstructor;
        };
        noTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
        headerSize: {
            type: NumberConstructor;
            default: number;
        };
        tabStyle: {
            type: StringConstructor;
            default: string;
        };
    }, {
        ul: import("vue").Ref<HTMLUListElement | undefined>;
        styleTab: (childId: any) => {
            color: string;
        };
        stylex: import("vue").ComputedRef<{
            top: string;
            left: string;
            width: string;
            height: string;
            background: string;
            boxShadow: string;
            transform: string;
        } | {
            top?: undefined;
            left?: undefined;
            width?: undefined;
            height?: undefined;
            background?: undefined;
            boxShadow?: undefined;
            transform?: undefined;
        }>;
        styleAlignIcon: (icon: any) => {
            display: string;
            "align-items": string;
            "font-size": string;
            cursor: string;
        } | {
            "font-size": string;
            cursor: string;
            display?: undefined;
            "align-items"?: undefined;
        };
        clickTag: (child: any) => void;
        activeChild: (index: any, initialAnimation?: any) => void;
        parseIndex: (index: any) => number;
        tabIdInstance: import("vue").Ref<{
            tabId: number;
            resetId: () => void;
        }>;
        topx: import("vue").Ref<string>;
        heightx: import("vue").Ref<number>;
        hover: import("vue").Ref<boolean>;
        children: import("vue").Ref<{
            label: string;
            icon: string;
            iconPack: string;
            tag: string;
            id: number;
            attrs: {
                constructor: Function;
                toString: () => string;
                toLocaleString: () => string;
                valueOf: () => Object;
                hasOwnProperty: (v: PropertyKey) => boolean;
                isPrototypeOf: (v: Object) => boolean;
                propertyIsEnumerable: (v: PropertyKey) => boolean;
            };
            disabled: boolean;
            vnode: VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }> | undefined;
            setActive: Function;
            setInvert: Function;
            setVertical: Function;
        }[]>;
        childActive: import("vue").Ref<number>;
        leftx: import("vue").Ref<number>;
        widthx: import("vue").Ref<number>;
        these: import("vue").Ref<boolean>;
        vertical: import("vue").Ref<boolean>;
        active: import("vue").Ref<boolean>;
        id: import("vue").Ref<null>;
        invert: import("vue").Ref<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        modelValue: string | number;
        tagColor: string;
        alignment: string;
        position: string;
        noTransitions: boolean;
        headerSize: number;
        tabStyle: string;
    } & {}>, {
        color: string;
        modelValue: string | number;
        tagColor: string;
        alignment: string;
        position: string;
        noTransitions: boolean;
        headerSize: number;
        tabStyle: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsTabs/vsTab.vue' {
    import { Ref } from "vue";
    const _default: import("vue").DefineComponent<{
        label: {
            default: string;
            type: StringConstructor;
        };
        icon: {
            default: string;
            type: StringConstructor;
        };
        tag: {
            default: string;
            type: StringConstructor;
        };
        iconPack: {
            type: StringConstructor;
            default: string;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        noTransitions: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        noTransitions: Ref<Boolean> | undefined;
        vertical: Ref<boolean>;
        active: Ref<boolean>;
        id: Ref<null>;
        invert: Ref<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        label: string;
        icon: string;
        iconPack: string;
        disabled: boolean;
        tag: string;
        noTransitions: boolean;
    } & {}>, {
        label: string;
        icon: string;
        iconPack: string;
        disabled: boolean;
        tag: string;
        noTransitions: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsAlert/vsAlert.vue' {
    const _default: import("vue").DefineComponent<{
        active: {
            type: (BooleanConstructor | StringConstructor)[];
            default: boolean;
        };
        title: {
            type: StringConstructor;
            default: null;
        };
        closable: {
            type: BooleanConstructor;
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        margin: {
            type: (BooleanConstructor | StringConstructor)[];
            default: string;
        };
        icon: {
            type: StringConstructor;
            default: null;
        };
        closeIcon: {
            type: StringConstructor;
            default: string;
        };
        iconPack: {
            type: StringConstructor;
            default: string;
        };
    }, {
        alert: import("vue").Ref<HTMLDivElement | undefined>;
        styleAlert: import("vue").ComputedRef<{
            background: string;
            boxShadow: string;
            color: string;
        }>;
        styleTitle: import("vue").ComputedRef<{
            boxShadow: string;
        }>;
        beforeEnter: (el: any) => void;
        enter: (el: any, done: any) => void;
        leave: (el: any, done: any) => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        active: string | boolean;
        icon: string;
        iconPack: string;
        title: string;
        closable: boolean;
        margin: string | boolean;
        closeIcon: string;
    } & {}>, {
        color: string;
        active: string | boolean;
        icon: string;
        iconPack: string;
        title: string;
        closable: boolean;
        margin: string | boolean;
        closeIcon: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsChip/vsChip.vue' {
    const _default: import("@vue/runtime-core").DefineComponent<{
        item: {
            type: BooleanConstructor;
        };
        value: {
            default: null;
            type: ArrayConstructor;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        text: {
            type: StringConstructor;
            default: null;
        };
        closable: {
            type: (StringConstructor | BooleanConstructor)[];
            default: boolean;
        };
        color: {
            type: StringConstructor;
            default: null;
        };
        icon: {
            type: StringConstructor;
            default: null;
        };
        iconPack: {
            type: StringConstructor;
            default: string;
        };
        closeIcon: {
            type: StringConstructor;
            default: string;
        };
        transparent: {
            type: BooleanConstructor;
            default: boolean;
        };
    }, {
        styleChip: import("@vue/reactivity").ComputedRef<{
            background: string;
            color: string;
        }>;
        closeChip: () => void;
        remove: () => void;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        color: string;
        active: boolean;
        value: unknown[];
        icon: string;
        iconPack: string;
        transparent: boolean;
        item: boolean;
        text: string;
        closable: string | boolean;
        closeIcon: string;
    } & {}>, {
        color: string;
        active: boolean;
        value: unknown[];
        icon: string;
        iconPack: string;
        transparent: boolean;
        item: boolean;
        text: string;
        closable: string | boolean;
        closeIcon: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsChip/vsChips.vue' {
    const _default: import("@vue/runtime-core").DefineComponent<{
        value: {};
        vsColor: {
            type: StringConstructor;
            default: string;
        };
        placeholder: {
            type: StringConstructor;
            default: string;
        };
        items: {
            type: ArrayConstructor;
        };
        iconPack: {
            type: StringConstructor;
            default: string;
        };
        removeIcon: {
            type: StringConstructor;
            default: string;
        };
    }, unknown, {
        newChip: string;
        chip1: boolean;
    }, {}, {
        addItem(): void;
        removeTotalItems(): void;
    }, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        iconPack: string;
        placeholder: string;
        vsColor: string;
        removeIcon: string;
    } & {
        value?: unknown;
        items?: unknown[] | undefined;
    }>, {
        iconPack: string;
        placeholder: string;
        vsColor: string;
        removeIcon: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsCard/vsCard.vue' {
    const _default: import("@vue/runtime-core").DefineComponent<{
        type: {
            default: string;
            type: (StringConstructor | BooleanConstructor)[];
        };
        content: {
            type: BooleanConstructor;
            default: boolean;
        };
        fitContent: {
            type: BooleanConstructor;
            default: boolean;
        };
        fillParent: {
            type: BooleanConstructor;
            default: boolean;
        };
        backgroundColor: {
            type: StringConstructor;
            default: string;
        };
    }, void, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        type: string | boolean;
        content: boolean;
        fitContent: boolean;
        fillParent: boolean;
        backgroundColor: string;
    } & {}>, {
        type: string | boolean;
        content: boolean;
        fitContent: boolean;
        fillParent: boolean;
        backgroundColor: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsCard/vsCardGroup.vue' {
    const _default: import("vue").DefineComponent<{}, {
        cards: import("vue").Ref<HTMLDivElement | undefined>;
        handleClick: (evt: any, dir: any) => void;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {}>, {}>;
    export default _default;
}

declare module 'vuesax3/components/vsAvatar/vsAvatar.vue' {
    import { Ref } from "vue";
    const _default: import("vue").DefineComponent<{
        badgePosition: {
            default: null;
        };
        pointer: {
            default: boolean;
            type: BooleanConstructor;
        };
        circle: {
            default: boolean;
            type: BooleanConstructor;
        };
        square: {
            default: boolean;
            type: BooleanConstructor;
        };
        history: {
            default: boolean;
            type: BooleanConstructor;
        };
        loading: {
            default: boolean;
            type: BooleanConstructor;
        };
        historyGradient: {
            default: boolean;
            type: BooleanConstructor;
        };
        writing: {
            default: boolean;
            type: BooleanConstructor;
        };
        badge: {
            default: boolean;
            type: BooleanConstructor;
        };
        badgeColor: {
            default: string;
            type: StringConstructor;
        };
        size: {
            default: string;
            type: StringConstructor;
        };
        text: {
            default: string;
            type: StringConstructor;
        };
    }, {
        textLength: Ref<number>;
        countPlus: Ref<number>;
        index: Ref<number>;
        additionalClasses: Ref<any[]>;
        avatarContent: Ref<HTMLDivElement | undefined>;
        avatarsLength: Ref<Number> | undefined;
        parentMax: Ref<Number> | undefined;
        isHidden: import("vue").ComputedRef<boolean | undefined>;
        isLatest: import("vue").ComputedRef<boolean>;
        getText: import("vue").ComputedRef<string>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        size: string;
        pointer: boolean;
        circle: boolean;
        square: boolean;
        loading: boolean;
        text: string;
        badgePosition: null;
        history: boolean;
        historyGradient: boolean;
        writing: boolean;
        badge: boolean;
        badgeColor: string;
    } & {}>, {
        size: string;
        pointer: boolean;
        circle: boolean;
        square: boolean;
        loading: boolean;
        text: string;
        badgePosition: null;
        history: boolean;
        historyGradient: boolean;
        writing: boolean;
        badge: boolean;
        badgeColor: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsPagination/vsPagination.vue' {
    const _default: import("vue").DefineComponent<{
        modelValue: {
            type: NumberConstructor;
            default: number;
        };
        infinite: {
            default: boolean;
            type: BooleanConstructor;
        };
        flat: {
            default: boolean;
            type: BooleanConstructor;
        };
        progress: {
            default: boolean;
            type: BooleanConstructor;
        };
        notMargin: {
            default: boolean;
            type: BooleanConstructor;
        };
        buttonsDotted: {
            default: boolean;
            type: BooleanConstructor;
        };
        notArrows: {
            default: boolean;
            type: BooleanConstructor;
        };
        onlyArrows: {
            default: boolean;
            type: BooleanConstructor;
        };
        circle: {
            default: boolean;
            type: BooleanConstructor;
        };
        square: {
            default: boolean;
            type: BooleanConstructor;
        };
        disabled: {
            default: boolean;
            type: BooleanConstructor;
        };
        disabledItems: {
            default: any[];
            type: ArrayConstructor;
        };
        loadingItems: {
            default: any[];
            type: ArrayConstructor;
        };
        length: {
            default: number;
            type: NumberConstructor;
        };
        max: {
            default: number;
            type: NumberConstructor;
        };
        dottedNumber: {
            default: number;
            type: NumberConstructor;
        };
    }, {
        leftActive: import("vue").Ref<number>;
        activeClassMove: import("vue").Ref<boolean>;
        val: import("vue").Ref<number>;
        prevClicked: () => void;
        nextClicked: () => void;
        getPages: import("vue").ComputedRef<any[]>;
        pagination: import("vue").Ref<HTMLDivElement | undefined>;
        getProgress: import("vue").ComputedRef<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        length: number;
        flat: boolean;
        progress: boolean;
        circle: boolean;
        square: boolean;
        disabled: boolean;
        modelValue: number;
        infinite: boolean;
        notMargin: boolean;
        buttonsDotted: boolean;
        notArrows: boolean;
        onlyArrows: boolean;
        disabledItems: unknown[];
        loadingItems: unknown[];
        max: number;
        dottedNumber: number;
    } & {}>, {
        length: number;
        flat: boolean;
        progress: boolean;
        circle: boolean;
        square: boolean;
        disabled: boolean;
        modelValue: number;
        infinite: boolean;
        notMargin: boolean;
        buttonsDotted: boolean;
        notArrows: boolean;
        onlyArrows: boolean;
        disabledItems: unknown[];
        loadingItems: unknown[];
        max: number;
        dottedNumber: number;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsBreadcrumb/vsBreadcrumb.vue' {
    const _default: import("@vue/runtime-core").DefineComponent<{
        items: {
            type: ArrayConstructor;
            readOnly: boolean;
        };
        separator: {
            type: StringConstructor;
            default: string;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        align: {
            type: StringConstructor;
            default: string;
        };
    }, {
        textStyle: import("@vue/reactivity").ComputedRef<any>;
        textClass: import("@vue/reactivity").ComputedRef<{}>;
        hasSlot: import("@vue/reactivity").ComputedRef<boolean>;
        mutableItems: import("@vue/reactivity").ComputedRef<unknown[] | undefined>;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        color: string;
        separator: string;
        align: string;
    } & {
        items?: unknown[] | undefined;
    }>, {
        color: string;
        separator: string;
        align: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsDivider/vsDivider.vue' {
    const _default: import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: string;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        icon: {
            default: null;
            type: StringConstructor;
        };
        borderStyle: {
            default: string;
            type: StringConstructor;
        };
        borderHeight: {
            default: string;
            type: StringConstructor;
        };
        position: {
            default: string;
            type: StringConstructor;
        };
        iconPack: {
            default: string;
            type: StringConstructor;
        };
    }, {
        getWidthAfter: import("vue").ComputedRef<string>;
        backgroundColor: import("vue").ComputedRef<string | undefined>;
        textAndBackgroundClass: import("vue").ComputedRef<{}>;
        textColor: import("vue").ComputedRef<string | undefined>;
        borderClass: import("vue").ComputedRef<{}>;
        beforeStyle: import("vue").ComputedRef<{
            width: import("vue").ComputedRef<string>;
            "border-top-width": string;
            "border-top-style": string;
        }>;
        getWidthBefore: import("vue").ComputedRef<string>;
        afterStyle: import("vue").ComputedRef<{
            width: import("vue").ComputedRef<string>;
            "border-top-width": string;
            "border-top-style": string;
        }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        icon: string;
        iconPack: string;
        color: string;
        position: string;
        background: string;
        borderStyle: string;
        borderHeight: string;
    } & {}>, {
        icon: string;
        iconPack: string;
        color: string;
        position: string;
        background: string;
        borderStyle: string;
        borderHeight: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsIcon/vsIcon.vue' {
    export class IconPackConstants {
        static iconPackGlobal: string;
    }
    const _default: import("@vue/runtime-core").DefineComponent<{
        icon: {
            default: null;
            type: StringConstructor;
        };
        iconPack: {
            default: null;
            type: StringConstructor;
        };
        color: {
            default: null;
            type: StringConstructor;
        };
        bg: {
            default: null;
            type: StringConstructor;
        };
        size: {
            default: null;
            type: StringConstructor;
        };
        round: {
            default: boolean;
            type: BooleanConstructor;
        };
    }, {
        getIconPack: import("@vue/reactivity").ComputedRef<string>;
        iconClass: import("@vue/reactivity").ComputedRef<{}>;
        iconStyle: import("@vue/reactivity").ComputedRef<{
            width: string | null;
            height: string | null;
            'font-size': string | null;
            color: import("@vue/reactivity").ComputedRef<string>;
            background: import("@vue/reactivity").ComputedRef<string>;
            cursor: string;
        }>;
        getBg: import("@vue/reactivity").ComputedRef<{}>;
        getColor: import("@vue/reactivity").ComputedRef<string>;
        getBgColor: import("@vue/reactivity").ComputedRef<string>;
        getBgSize: import("@vue/reactivity").ComputedRef<{}>;
    }, unknown, {}, {}, import("@vue/runtime-core").ComponentOptionsMixin, import("@vue/runtime-core").ComponentOptionsMixin, Record<string, any>, string, import("@vue/runtime-core").VNodeProps & import("@vue/runtime-core").AllowedComponentProps & import("@vue/runtime-core").ComponentCustomProps, Readonly<{
        icon: string;
        iconPack: string;
        color: string;
        bg: string;
        size: string;
        round: boolean;
    } & {}>, {
        icon: string;
        iconPack: string;
        color: string;
        bg: string;
        size: string;
        round: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsNavbar/vsNavbar.vue' {
    const _default: import("vue").DefineComponent<{
        fixed: {
            default: boolean;
            type: BooleanConstructor;
        };
        sticky: {
            default: boolean;
            type: BooleanConstructor;
        };
        leftAligned: {
            default: boolean;
            type: BooleanConstructor;
        };
        open: {
            default: boolean;
            type: BooleanConstructor;
        };
        shadow: {
            default: boolean;
            type: BooleanConstructor;
        };
        shadowScroll: {
            default: boolean;
            type: BooleanConstructor;
        };
        hideScroll: {
            default: boolean;
            type: BooleanConstructor;
        };
        textWhite: {
            default: boolean;
            type: BooleanConstructor;
        };
        square: {
            default: boolean;
            type: BooleanConstructor;
        };
        paddingScroll: {
            default: boolean;
            type: BooleanConstructor;
        };
        notLine: {
            default: boolean;
            type: BooleanConstructor;
        };
        leftCollapsed: {
            default: boolean;
            type: BooleanConstructor;
        };
        centerCollapsed: {
            default: boolean;
            type: BooleanConstructor;
        };
        rightCollapsed: {
            default: boolean;
            type: BooleanConstructor;
        };
        targetScroll: {
            type: StringConstructor;
            default: null;
        };
    }, {
        leftLine: import("vue").Ref<number>;
        widthLine: import("vue").Ref<number>;
        scrollTop: import("vue").Ref<number>;
        collapsedWidth: import("vue").Ref<number>;
        hidden: import("vue").Ref<boolean>;
        shadowActive: import("vue").Ref<boolean>;
        paddingScrollActive: import("vue").Ref<boolean>;
        lineNotTransition: import("vue").Ref<boolean>;
        collapsedForced: import("vue").Ref<boolean>;
        setModel: (id: string, handleFunc: Function) => void;
        setLeftLine: (left: any, transition?: boolean) => void;
        setWidthLine: (width: any) => void;
        navbarContent: import("vue").Ref<HTMLDivElement | undefined>;
        left: import("vue").Ref<HTMLDivElement | undefined>;
        right: import("vue").Ref<HTMLDivElement | undefined>;
        center: import("vue").Ref<HTMLDivElement | undefined>;
        zIndex: number;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("update:value" | "collapsed")[], "update:value" | "collapsed", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        shadow: boolean;
        square: boolean;
        textWhite: boolean;
        fixed: boolean;
        sticky: boolean;
        leftAligned: boolean;
        open: boolean;
        shadowScroll: boolean;
        hideScroll: boolean;
        paddingScroll: boolean;
        notLine: boolean;
        leftCollapsed: boolean;
        centerCollapsed: boolean;
        rightCollapsed: boolean;
        targetScroll: string;
    } & {}>, {
        shadow: boolean;
        square: boolean;
        textWhite: boolean;
        fixed: boolean;
        sticky: boolean;
        leftAligned: boolean;
        open: boolean;
        shadowScroll: boolean;
        hideScroll: boolean;
        paddingScroll: boolean;
        notLine: boolean;
        leftCollapsed: boolean;
        centerCollapsed: boolean;
        rightCollapsed: boolean;
        targetScroll: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsNavbar/vsNavbarGroup.vue' {
    const _default: import("vue").DefineComponent<{}, void, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {}>, {}>;
    export default _default;
}

declare module 'vuesax3/components/vsNavbar/vsNavbarItem.vue' {
    const _default: import("vue").DefineComponent<{
        active: {
            default: boolean;
            type: BooleanConstructor;
        };
        to: {};
        id: {};
        href: {};
        target: {
            default: string;
        };
    }, {
        handleLine: () => void;
        handleClick: () => void;
        handleActive: () => void;
        item: import("vue").Ref<HTMLButtonElement | undefined>;
        listeners: import("vue").ComputedRef<{
            click: (event: any) => void;
        }>;
        handleRouteChange: () => void;
        internalActive: import("vue").Ref<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        active: boolean;
        target: string;
    } & {
        to?: unknown;
        href?: unknown;
        id?: unknown;
    }>, {
        active: boolean;
        target: string;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSideBar/vsSidebar.vue' {
    const _default: import("vue").DefineComponent<{
        value: {};
        reduce: {
            default: boolean;
            type: BooleanConstructor;
        };
        hoverExpand: {
            default: boolean;
            type: BooleanConstructor;
        };
        open: {
            default: boolean;
            type: BooleanConstructor;
        };
        notLineActive: {
            default: boolean;
            type: BooleanConstructor;
        };
        square: {
            default: boolean;
            type: BooleanConstructor;
        };
        textWhite: {
            default: boolean;
            type: BooleanConstructor;
        };
        notShadow: {
            default: boolean;
            type: BooleanConstructor;
        };
        relative: {
            default: boolean;
            type: BooleanConstructor;
        };
        absolute: {
            default: boolean;
            type: BooleanConstructor;
        };
        right: {
            default: boolean;
            type: BooleanConstructor;
        };
        background: {
            default: string;
            type: StringConstructor;
        };
        expanded: {
            default: boolean;
            type: BooleanConstructor;
        };
        fixedExpandWidth: {
            default: null;
            type: NumberConstructor;
        };
    }, {
        staticWidth: import("vue").Ref<number>;
        forceExpand: import("vue").Ref<boolean>;
        reduceInternal: import("vue").Ref<boolean>;
        handleClickItem: (id: string) => void;
        clickCloseSidebar: (evt: any) => void;
        listeners: import("vue").ComputedRef<{
            mouseenter: () => void;
            mouseleave: () => void;
        }>;
        sidebar: import("vue").Ref<HTMLDivElement | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        danger: boolean;
        success: boolean;
        warn: boolean;
        dark: boolean;
        primary: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("update:value" | "update:open" | "update:expanded")[], "update:value" | "update:open" | "update:expanded", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        reduce: boolean;
        right: boolean;
        square: boolean;
        textWhite: boolean;
        open: boolean;
        background: string;
        hoverExpand: boolean;
        notLineActive: boolean;
        notShadow: boolean;
        relative: boolean;
        absolute: boolean;
        expanded: boolean;
        fixedExpandWidth: number;
    } & {
        value?: unknown;
    }>, {
        reduce: boolean;
        right: boolean;
        square: boolean;
        textWhite: boolean;
        open: boolean;
        background: string;
        hoverExpand: boolean;
        notLineActive: boolean;
        notShadow: boolean;
        relative: boolean;
        absolute: boolean;
        expanded: boolean;
        fixedExpandWidth: number;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSideBar/vsSidebarItem.vue' {
    import { Ref } from "vue";
    const _default: import("vue").DefineComponent<{
        to: {};
        href: {};
        target: {
            default: string;
        };
        value: {
            type: StringConstructor;
        };
        id: {
            type: StringConstructor;
        };
        arrow: {
            type: BooleanConstructor;
        };
    }, {
        parentValue: any;
        internalActive: Ref<boolean>;
        reduced: Ref<Boolean> | undefined;
        onClick: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        target: string;
        arrow: boolean;
    } & {
        value?: string | undefined;
        to?: unknown;
        href?: unknown;
        id?: string | undefined;
    }>, {
        target: string;
        arrow: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsSideBar/vsSidebarGroup.vue' {
    const _default: import("vue").DefineComponent<{
        open: {
            default: boolean;
            type: BooleanConstructor;
        };
    }, {
        handleClickItem: (id: string) => void;
        leave: (el: any, done: any) => void;
        enter: (el: any, done: any) => void;
        beforeEnter: (el: any) => void;
        parentValue: any;
        group: import("vue").Ref<boolean>;
        openState: import("vue").Ref<boolean>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        open: boolean;
    } & {}>, {
        open: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsPopper/vsPopper.vue' {
    /**
        * The Popper component.
        */
    const Placement: readonly ["auto", "auto-start", "auto-end", "top", "top-start", "top-end", "bottom", "bottom-start", "bottom-end", "right", "right-start", "right-end", "left", "left-start", "left-end"];
    export type PlacementType = typeof Placement[number];
    const _default: import("vue").DefineComponent<{
            /**
                * Preferred [placement](https://popper.js.org/docs/v2/constructors/#options)
                */
            placement: {
                    type: StringConstructor;
                    default: string;
            };
            /**
                * Customize the [offset](https://popper.js.org/docs/v2/modifiers/offset/) of the popper
                */
            offsetX: {
                    type: StringConstructor;
                    default: string;
            };
            offsetY: {
                    type: StringConstructor;
                    default: string;
            };
            /**
                * Show the popper on hover
                */
            hover: {
                    type: BooleanConstructor;
                    default: boolean;
            };
            timeout: {
                    type: NumberConstructor;
                    default: number;
            };
            /**
                * Add an arrow to the popper
                */
            arrow: {
                    type: BooleanConstructor;
                    default: boolean;
            };
            /**
                * Stop arrow from reaching the edge of the Popper
                */
            arrowPadding: {
                    type: StringConstructor;
                    default: string;
            };
            cursorPointer: {
                    type: BooleanConstructor;
                    default: boolean;
            };
    }, {
            hideFn: any;
            isOpen: any;
            popperNode: any;
            triggerNode: any;
            toggle: any;
            hide: any;
            listeners: import("vue").ComputedRef<{
                    focus: () => void;
                    blur: () => void;
                    mouseover: any;
                    mouseleave: any;
            } | {
                    focus: () => void;
                    blur: () => void;
                    click: any;
            }>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("show:popper" | "hide:popper")[], "show:popper" | "hide:popper", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
            arrow: boolean;
            hover: boolean;
            placement: string;
            offsetX: string;
            offsetY: string;
            timeout: number;
            arrowPadding: string;
            cursorPointer: boolean;
    } & {}>, {
            arrow: boolean;
            hover: boolean;
            placement: string;
            offsetX: string;
            offsetY: string;
            timeout: number;
            arrowPadding: string;
            cursorPointer: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsPopper/vsPopupMenu.vue' {
    const _default: import("vue").DefineComponent<{}, {
        insertBody: (element: HTMLElement, parent: any) => void;
        dropOptions: import("vue").Ref<HTMLDivElement | undefined>;
        dropdownVisible: import("vue").Ref<boolean>;
        leftAfter: import("vue").Ref<number>;
        rightx: import("vue").Ref<boolean>;
        vsDropRight: import("vue").Ref<boolean>;
        widthx: import("vue").Ref<number>;
        vsCustomContent: import("vue").Ref<boolean>;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("remove" | "shown")[], "remove" | "shown", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {}>, {}>;
    export default _default;
}

declare module 'vuesax3/components/vsPopper/vsPopupItem.vue' {
    import { Ref } from "vue";
    const _default: import("vue").DefineComponent<{
        to: {};
        onClickClose: {
            default: boolean;
            type: BooleanConstructor;
        };
        disabled: {
            default: boolean;
            type: BooleanConstructor;
        };
        divider: {
            default: boolean;
            type: BooleanConstructor;
        };
    }, {
        clickClose: () => void;
        hoverx: Ref<boolean>;
        vsDropDownItem: Ref<boolean>;
        color: Ref<string>;
        giveColor: (opacity?: number) => string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        disabled: boolean;
        onClickClose: boolean;
        divider: boolean;
    } & {
        to?: unknown;
    }>, {
        disabled: boolean;
        onClickClose: boolean;
        divider: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsDialog/vsDialog.vue' {
    const _default: import("vue").DefineComponent<{
        modelValue: {
            type: BooleanConstructor;
            default: boolean;
        };
        loading: {
            type: BooleanConstructor;
            default: boolean;
        };
        fullScreen: {
            type: BooleanConstructor;
            default: boolean;
        };
        notClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        preventClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        notPadding: {
            type: BooleanConstructor;
            default: boolean;
        };
        overflowHidden: {
            type: BooleanConstructor;
            default: boolean;
        };
        blur: {
            type: BooleanConstructor;
            default: boolean;
        };
        square: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoWidth: {
            type: BooleanConstructor;
            default: boolean;
        };
        scroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        notCenter: {
            type: BooleanConstructor;
            default: boolean;
        };
        routerClose: {
            type: BooleanConstructor;
            default: boolean;
        };
        width: {
            type: StringConstructor;
            default: null;
        };
        footerClasses: {
            type: ObjectConstructor;
            default: null;
        };
    }, {
        rebound: import("vue").Ref<boolean>;
        closeClick: (evt: any) => void;
        click: (evt: any) => void;
        insertDialog: () => void;
        esc: (evt: any) => void;
        addEsc: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").DefineComponent<{
        color: {
            type: StringConstructor;
            default: null;
        };
        danger: {
            type: BooleanConstructor;
            default: boolean;
        };
        success: {
            type: BooleanConstructor;
            default: boolean;
        };
        warn: {
            type: BooleanConstructor;
            default: boolean;
        };
        dark: {
            type: BooleanConstructor;
            default: boolean;
        };
        primary: {
            type: BooleanConstructor;
            default: boolean;
        };
        active: {
            type: BooleanConstructor;
            default: boolean;
        };
        colorSecondary: {
            type: StringConstructor;
            default: string;
        };
        textColor: {
            type: StringConstructor;
            default: null;
        };
    }, unknown, {
        componentColor: import("vue").Ref<string>;
        getColor: (color: any) => any;
        getColorSecondary: FunctionConstructor;
        approuter: import("vue-router").Router | undefined;
    }, {}, {
        isColorDark(): boolean;
        isColor(): boolean;
    }, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    } & {}>, {
        color: string;
        primary: boolean;
        success: boolean;
        danger: boolean;
        dark: boolean;
        warn: boolean;
        active: boolean;
        colorSecondary: string;
        textColor: string;
    }>, ("update:modelValue" | "close")[], "update:modelValue" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        blur: boolean;
        square: boolean;
        loading: boolean;
        width: string;
        modelValue: boolean;
        fullScreen: boolean;
        notClose: boolean;
        preventClose: boolean;
        notPadding: boolean;
        overflowHidden: boolean;
        autoWidth: boolean;
        scroll: boolean;
        notCenter: boolean;
        routerClose: boolean;
        footerClasses: Record<string, any>;
    } & {}>, {
        blur: boolean;
        square: boolean;
        loading: boolean;
        width: string;
        modelValue: boolean;
        fullScreen: boolean;
        notClose: boolean;
        preventClose: boolean;
        notPadding: boolean;
        overflowHidden: boolean;
        autoWidth: boolean;
        scroll: boolean;
        notCenter: boolean;
        routerClose: boolean;
        footerClasses: Record<string, any>;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsCollapse/vsCollapse.vue' {
    const _default: import("vue").DefineComponent<{
        accordion: {
            default: boolean;
            type: BooleanConstructor;
        };
        type: {
            default: string;
            type: StringConstructor;
        };
        openHover: {
            default: boolean;
            type: BooleanConstructor;
        };
    }, {
        emitChange: () => void;
        closeAllItems: (el: any, maxHeight: any) => void;
        collapse: import("vue").Ref<HTMLDivElement | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "change"[], "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        type: string;
        accordion: boolean;
        openHover: boolean;
    } & {}>, {
        type: string;
        accordion: boolean;
        openHover: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/components/vsCollapse/vsCollapseItem.vue' {
    import { Ref } from 'vue';
    const _default: import("vue").DefineComponent<{
        open: {
            default: boolean;
            type: BooleanConstructor;
        };
        disabled: {
            default: boolean;
            type: BooleanConstructor;
        };
        notArrow: {
            default: boolean;
            type: BooleanConstructor;
        };
        iconArrow: {
            default: string;
            type: StringConstructor;
        };
        iconPack: {
            default: string;
            type: StringConstructor;
        };
        sst: {
            default: boolean;
            type: BooleanConstructor;
        };
    }, {
        mouseover: () => void;
        mouseout: () => void;
        initMaxHeight: () => void;
        maxHeight: Ref<string>;
        accordion: boolean | undefined;
        openHover: boolean | undefined;
        styleContent: import("vue").ComputedRef<{
            maxHeight: string;
        }>;
        dataReady: Ref<boolean>;
        changeHeight: () => void;
        toggleContent: () => void;
        content: Ref<HTMLDivElement | undefined>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        iconPack: string;
        disabled: boolean;
        open: boolean;
        notArrow: boolean;
        iconArrow: string;
        sst: boolean;
    } & {}>, {
        iconPack: string;
        disabled: boolean;
        open: boolean;
        notArrow: boolean;
        iconArrow: string;
        sst: boolean;
    }>;
    export default _default;
}

declare module 'vuesax3/layout/vsRow/vsRow.vue' {
    const _default: import("vue").DefineComponent<{
        w: {
            type: NumberConstructor;
            default: number;
        };
        justify: {
            type: StringConstructor;
            default: string;
        };
        align: {
            type: StringConstructor;
            default: string;
        };
        direction: {
            type: StringConstructor;
            default: string;
        };
    }, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        w: number;
        justify: string;
        align: string;
        direction: string;
    } & {}>, {
        w: number;
        justify: string;
        align: string;
        direction: string;
    }>;
    export default _default;
}

declare module 'vuesax3/layout/vsCol/vsCol.vue' {
    const _default: import("vue").DefineComponent<{
        w: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        offset: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        order: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        lg: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        sm: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        xs: {
            type: (StringConstructor | NumberConstructor)[];
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        justify: {
            type: StringConstructor;
            default: string;
        };
    }, unknown, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        type: string;
        w: string | number;
        justify: string;
        offset: string | number;
        order: string | number;
        lg: string | number;
        sm: string | number;
        xs: string | number;
    } & {}>, {
        type: string;
        w: string | number;
        justify: string;
        offset: string | number;
        order: string | number;
        lg: string | number;
        sm: string | number;
        xs: string | number;
    }>;
    export default _default;
}

